{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(grep:*)",
      "mcp__firecrawl__firecrawl_scrape",
      "mcp__brave-search__brave_web_search",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "Bash(az webapp log tail:*)",
      "Bash(source:*)",
      "Bash(az webapp config show:*)",
      "Bash(python:*)",
      "Bash(az webapp config appsettings list:*)",
      "Bash(az webapp config set:*)",
      "Bash(chmod:*)",
      "Bash(zip:*)",
      "Bash(az webapp deploy:*)",
      "Bash(az webapp restart:*)",
      "Bash(az webapp config appsettings set:*)",
      "Bash(az webapp log deployment show:*)",
      "Bash(curl:*)",
      "Bash(timeout 5 uvicorn:*)",
      "Bash(az webapp show:*)",
      "Bash(cat:*)",
      "Bash(az webapp log config:*)",
      "Bash(az webapp log download:*)",
      "Bash(unzip:*)",
      "Read(//home/romiteld/**)",
      "mcp__firecrawl__firecrawl_search",
      "WebSearch",
      "Bash(pip show:*)",
      "WebFetch(domain:pypi.org)",
      "Bash(SCM_DO_BUILD_DURING_DEPLOYMENT=true )",
      "Bash(ENABLE_ORYX_BUILD=true )",
      "Bash(WEBSITE_HTTPLOGGING_RETENTION_DAYS=7 )",
      "Bash(PRE_BUILD_SCRIPT_PATH=prebuild.sh )",
      "Bash(POST_BUILD_SCRIPT_PATH=postbuild.sh )",
      "Bash(PYTHON_ENABLE_GUNICORN_MULTIWORKERS=true )",
      "Bash(WEBSITES_ENABLE_APP_SERVICE_STORAGE=true )",
      "Bash(WEBSITE_RUN_FROM_PACKAGE=0 )",
      "Bash(timeout 20 az webapp log tail --resource-group TheWell-App-East --name well-intake-api)",
      "Bash(az webapp ssh:*)",
      "Bash(wait)",
      "mcp__sequential-thinking__sequentialthinking",
      "Bash(az containerapp logs show:*)",
      "Bash(az containerapp show:*)",
      "Bash(openssl rand:*)",
      "Bash(az containerapp update:*)",
      "Bash(docker build:*)",
      "Bash(docker push:*)",
      "Bash(docker run:*)",
      "Bash(pip uninstall:*)",
      "Bash(timeout:*)",
      "Bash(git add:*)",
      "Bash(az containerapp env show:*)",
      "WebFetch(domain:well-zoho-oauth.azurewebsites.net)",
      "WebFetch(domain:well-zoho-oauth.scm.azurewebsites.net)",
      "mcp__asana__asana_list_workspaces",
      "mcp__asana__asana_typeahead_search",
      "mcp__asana__asana_search_tasks",
      "mcp__asana__asana_get_tasks",
      "mcp__asana__asana_create_task_story",
      "Bash(az webapp list:*)",
      "Read(/mnt/c/Users/DanielRomitelli/source/repos/OutlookWebAddIn1/**)",
      "Read(/mnt/c/Users/DanielRomitelli/source/repos/OutlookWebAddIn1Web/**)",
      "Read(/mnt/c/Users/DanielRomitelli/source/repos/OutlookWebAddIn1Web/Functions/**)",
      "Read(/mnt/c/Users/DanielRomitelli/source/repos/OutlookWebAddIn1/OutlookWebAddIn1Manifest/**)",
      "Read(/mnt/c/Users/DanielRomitelli/source/repos/OutlookWebAddIn1Web/Scripts/**)",
      "Bash(pip install:*)",
      "mcp__desktop-commander__search_files",
      "WebFetch(domain:well-intake-api.salmonsmoke-78b2d936.eastus.azurecontainerapps.io)",
      "Bash(TENANT_NAME=\"thewellb2ce6011950\")",
      "Bash(az account set:*)",
      "Bash(az group:*)",
      "Bash(az resource list:*)",
      "Bash(./migrate-azure-resources.sh:*)",
      "Bash(az containerapp exec:*)",
      "Read(/tmp/**)",
      "Bash(for url in icon-32.png icon-80.png commands.html taskpane.html)",
      "Bash(do)",
      "Bash(echo:*)",
      "Bash(done)",
      "WebFetch(domain:well-intake-api.wittyocean-dfae0f9b.eastus.azurecontainerapps.io)",
      "WebFetch(domain:github.com)",
      "mcp__github__search_code",
      "Bash(az acr login:*)",
      "Bash(az containerapp revision list:*)",
      "Bash(az containerapp revision deactivate:*)",
      "Bash(az containerapp ingress traffic set:*)",
      "Bash(do echo -n \"$url: \")",
      "Bash(xmllint:*)",
      "Bash(az acr repository show-tags:*)",
      "Bash(find:*)",
      "Bash(tree:*)",
      "Bash(git check-ignore:*)",
      "Bash(git checkout:*)",
      "Bash(for url in commands.html taskpane.html icon-16.png icon-32.png icon-80.png commands.js taskpane.js config.js)",
      "Bash(for resource in manifest.xml commands.html taskpane.html config.js commands.js taskpane.js icon-16.png icon-32.png icon-80.png)",
      "Bash(do printf \"%-20s: \" \"$resource\")",
      "Bash(git log:*)",
      "Bash(az account show:*)",
      "Bash(az storage account list:*)",
      "Bash(az functionapp list:*)",
      "Bash(az keyvault list:*)",
      "Bash(az functionapp config appsettings list:*)",
      "Bash(az storage account show:*)",
      "Bash(az storage container list:*)",
      "Bash(az containerapp list:*)",
      "Bash(az search service:*)",
      "Bash(az acr list:*)",
      "Bash(az provider register:*)",
      "Bash(az monitor app-insights component create:*)",
      "Bash(az servicebus namespace show:*)",
      "Bash(az signalr show:*)",
      "Bash(az monitor app-insights component show:*)",
      "Bash(az redis show:*)",
      "Bash(az functionapp show:*)",
      "Bash(az appservice plan list:*)",
      "Bash(az account list:*)",
      "Bash(az appservice plan create:*)",
      "Bash(az afd route:*)",
      "Bash(az afd profile show:*)",
      "WebFetch(domain:well-intake-api-dnajdub4azhjcgc3.z03.azurefd.net)",
      "Bash(az containerapp revision restart:*)",
      "Bash(az containerapp restart:*)",
      "Bash(git commit:*)",
      "Bash(az containerapp stop:*)",
      "Bash(for:*)",
      "Bash(do printf \"%-30s: \" \"$e\")",
      "Bash(APP_ID=\"c2435c27-41f3-4a3a-b400-7406518bb415\")",
      "Bash(GRAPH_APP_ID=\"00000003-0000-0000-c000-000000000000\")",
      "Bash(az ad app permission:*)",
      "Bash(az containerapp revision show:*)",
      "Bash(az containerapp env list:*)",
      "Bash(nslookup:*)",
      "Bash(host well-intake-db.postgres.database.azure.com)",
      "Bash(dig:*)",
      "Bash(az postgres server list:*)",
      "Bash(az postgres flexible-server list:*)",
      "Bash(az postgres flexible-server show:*)",
      "Bash(az postgres flexible-server parameter show:*)",
      "WebFetch(domain:www.npmjs.com)",
      "Bash(docker tag:*)",
      "Bash(az afd endpoint purge:*)",
      "Bash(az staticwebapp secrets list:*)",
      "Bash(sed:*)",
      "Bash(az webapp log deployment list:*)",
      "Bash(az redis list:*)",
      "Bash(az signalr list:*)",
      "Bash(az servicebus namespace list:*)",
      "Bash(az servicebus namespace authorization-rule keys list:*)",
      "Bash(az signalr key list:*)",
      "Bash(az postgres flexible-server db list:*)",
      "Bash('AZURE_SEARCH_ENDPOINT=https://wellintakesearch0903.search.windows.net' )",
      "Read(///**)",
      "mcp__desktop-commander__read_file",
      "Bash(az afd profile list:*)",
      "Bash(az afd endpoint list:*)",
      "Bash(az afd rule-set:*)",
      "Bash(az afd endpoint show:*)",
      "Bash(az afd origin-group show:*)",
      "Bash(az communication list:*)",
      "Bash(DATABASE_URL=\"postgresql://test:test@localhost:5432/test\" python add_import_v2_router.py)",
      "Bash(psql:*)",
      "Bash(TIMESTAMP=20250911-184700)",
      "Bash(\"ZCAND_MODULE=Candidates\" )",
      "Bash(\"ZCAND_FIELD_PUBLISHED=Publish_to_Vault\" )",
      "Bash(\"ZCAND_FIELD_PUBLISHED_DATE=Date_Published_to_Vault\" )",
      "Bash(\"ZCAND_STATUS_FIELD=Candidate_Status\" )",
      "Bash(az containerapp secret show:*)",
      "Bash(xargs -I {} az containerapp revision restart --name well-intake-api --resource-group TheWell-Infra-East --revision {})",
      "Bash(az monitor app-insights query:*)",
      "Bash(PGPASSWORD:*)",
      "WebFetch(domain:www.loom.com)",
      "mcp__firecrawl__firecrawl_extract",
      "WebFetch(domain:docs.firecrawl.dev)",
      "Bash(az keyvault secret set:*)",
      "Bash(printf:*)",
      "mcp__desktop-commander__edit_block",
      "mcp__desktop-commander__start_search",
      "mcp__desktop-commander__get_more_search_results",
      "WebFetch(domain:well-zoho-oauth-v2.azurewebsites.net)",
      "Bash(az postgres flexible-server update:*)",
      "WebFetch(domain:www.zoho.com)",
      "WebFetch(domain:help.zoho.com)",
      "Bash(az login:*)",
      "Bash(# 1. Check Container App is running the latest image\necho \"\"=== 1. VERIFY CONTAINER APP STATUS ===\"\"\naz containerapp show --name well-intake-api --resource-group TheWell-Infra-East --query \"\"{image:properties.template.containers[0].image, revision:properties.latestRevisionName, replicas:properties.runningRevision.replicas, state:properties.runningRevision.trafficWeight}\"\" -o table\n\necho \"\"\"\"\necho \"\"=== 2. CHECK HEALTH ENDPOINT ===\"\"\ncurl -s https://well-intake-api.wittyocean-dfae0f9b.eastus.azurecontainerapps.io/health | python -m json.tool | grep -E \"\"(status|timestamp|api|zoho|redis)\"\" | head -10)",
      "Bash(# 3. Verify the backend is serving the CORRECT taskpane.html with cache-busting\necho \"\"=== 3. VERIFY BACKEND SERVES CORRECT HTML ===\"\"\ncurl -s \"\"https://well-intake-api.wittyocean-dfae0f9b.eastus.azurecontainerapps.io/addin/taskpane.html\"\" | grep -E \"\"taskpane\\.js\\?v=\"\" | head -3\n\necho \"\"\"\"\necho \"\"=== 4. VERIFY BACKEND SERVES CORRECT JS STRUCTURE ===\"\"\n# Check if the JS file has the correct 3-record structure\ncurl -s \"\"https://well-intake-api.wittyocean-dfae0f9b.eastus.azurecontainerapps.io/addin/taskpane.js?v=fix-20250924\"\" | grep -A 5 \"\"user_corrections:\"\" | grep -E \"\"(company_record|contact_record|deal_record)\"\" | head -10)",
      "Bash(# 5. Test that backend accepts the correct structure\necho \"\"=== 5. VERIFY BACKEND ACCEPTS 3-RECORD STRUCTURE ===\"\"\n# Create a test with correct structure\ncat > /tmp/test_correct_structure.json << ''EOF''\n{\n  \"\"email_content\"\": \"\"Structure test only\"\",\n  \"\"user_corrections\"\": {\n    \"\"company_record\"\": {\n      \"\"company_name\"\": \"\"Test Corp\"\"\n    },\n    \"\"contact_record\"\": {\n      \"\"first_name\"\": \"\"Test\"\",\n      \"\"last_name\"\": \"\"User\"\"\n    },\n    \"\"deal_record\"\": {\n      \"\"deal_name\"\": \"\"Test Deal\"\"\n    }\n  }\n}\nEOF\n\n# Test with DRY_RUN header to avoid creating records\ncurl -s -X POST \"\"https://well-intake-api.wittyocean-dfae0f9b.eastus.azurecontainerapps.io/intake/email\"\" \\\n  -H \"\"X-API-Key: ${API_KEY}\"\" \\\n  -H \"\"X-Dry-Run: true\"\" \\\n  -H \"\"Content-Type: application/json\"\" \\\n  -d @/tmp/test_correct_structure.json \\\n  -w \"\"\\nHTTP Status: %{http_code}\\n\"\" | tail -5)",
      "Bash(# 6. Analyze what the browser is actually requesting vs what backend provides\necho \"\"=== 6. BROWSER vs BACKEND ANALYSIS ===\"\"\necho \"\"\"\"\necho \"\"BROWSER IS LOADING:\"\"\necho \"\"  - taskpane.js?v=indicators-20250917-2 (OLD - Sept 17)\"\"\necho \"\"\"\"\necho \"\"BACKEND IS SERVING:\"\"\necho \"\"  - taskpane.js?v=fix-20250924 (NEW - Sept 24)\"\"\necho \"\"\"\"\necho \"\"=== 7. CHECK CONTAINER LOGS FOR RECENT ERRORS ===\"\"\naz containerapp logs show --name well-intake-api --resource-group TheWell-Infra-East --tail 30 | grep -E \"\"(500|ERROR|Exception|user_corrections)\"\" | tail -10)",
      "Bash(# 8. Final verification - check what exact error the backend is throwing\necho \"\"=== 8. BACKEND ERROR ANALYSIS ===\"\"\necho \"\"\"\"\necho \"\"When browser sends OLD format with flat user_corrections:\"\"\necho ''  {candidate_name, candidate_email, phone, job_title, location, company_name, referrer_name}''\necho \"\"\"\"\necho \"\"Backend expects NEW format with 3-record structure:\"\"\necho ''  {company_record: {...}, contact_record: {...}, deal_record: {...}}''\necho \"\"\"\"\necho \"\"=== 9. PROOF THIS IS PURE CACHE ISSUE ===\"\"\necho \"\"\"\"\necho \"\"✅ Backend Container App: Running latest image (cache-fix-20250923-231818)\"\"\necho \"\"✅ Backend Health: All services operational\"\"\necho \"\"✅ Backend HTML: Serves taskpane.js?v=fix-20250924\"\"\necho \"\"✅ Backend JS: Contains correct 3-record structure\"\"\necho \"\"✅ Backend Code: Fixed to handle structured user_corrections\"\"\necho \"\"\"\"\necho \"\"❌ Browser: Loading taskpane.js?v=indicators-20250917-2 (OLD)\"\"\necho \"\"❌ Browser: Sending flat user_corrections structure\"\"\necho \"\"❌ Result: 500 error because backend expects 3-record structure\"\"\necho \"\"\"\"\necho \"\"CONCLUSION: 100% Office Add-in cache issue\"\")",
      "Bash(az:*)",
      "Bash(while read rg)",
      "Bash(do echo \"Resource Group: $rg\")",
      "Bash(while read name)",
      "Bash(do if [ ! -z \"$name\" ])",
      "Bash(then echo \"  Account: $name\")",
      "Bash(fi)",
      "Bash(wsl az --version)",
      "Bash(wsl az acr login:*)",
      "Bash(wsl az afd endpoint purge:*)",
      "Bash(wsl az containerapp show:*)",
      "Bash(wsl az postgres flexible-server show:*)",
      "Bash(wsl az redis show:*)",
      "Bash(docker:*)",
      "Bash(wsl az account show:*)",
      "Bash(npm run validate:*)",
      "Bash(node:*)",
      "Bash(npm install)",
      "Bash(npm run validate:json:*)",
      "Bash(git push:*)",
      "Bash(wsl az containerapp update:*)"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "/home/romiteld/zoho"
    ]
  }
}